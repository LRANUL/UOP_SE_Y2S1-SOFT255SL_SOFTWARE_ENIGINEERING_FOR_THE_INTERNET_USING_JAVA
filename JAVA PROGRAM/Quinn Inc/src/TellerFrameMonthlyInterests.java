/**
* SOFT255SL COURSEWORK C1 T1
* Team No:1 
* Team Name: TEAM QUINN 
* Project: Bank Management System.
 */
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import DatabaseConnection.DBConnection;
import LocalTimeAndDate.LocalTimeAndDate;
import java.sql.PreparedStatement;

/**
 * This frame functions to process Interest to all bank accounts
 * Design and Logic Implemented H.V.L.H.
 * @author Lucas.L.H.H
 */
public class TellerFrameMonthlyInterests extends javax.swing.JFrame {

    /**
     * Creates new form TellerFrameMonthlyInterests
     */
    
    // Declaring variable to be accessible within the whole code block
    String tellerIDGlobal = "";
    
    // Creating a new object to execute the monthly interest functionality
    Account monthlyInterest;
    
    // Creating new object to retrieve current month from localhost 
    LocalTimeAndDate ltad;
    
    // Creating new table model for customerAccounts jtable in monthlyInterest panel
    DefaultTableModel customerAccountsRecordsModel;
    
    // Creating a new object to retrieve the database connection URL
    DBConnection db;
    
    public TellerFrameMonthlyInterests() {
        initComponents();
        
        // Creating a new object to execute the monthly interest functionality
        monthlyInterest = new Account();
        
        // Creating new object to retrieve current month from localhost 
        ltad = new LocalTimeAndDate();
        
        // Creating a new object to retrieve the database connection URL
        db = new DBConnection();
        
        
        // Assigning table model to the customerAccountsJTable table
        customerAccountsRecordsModel = (DefaultTableModel) customerAccountsJTable.getModel();
        
        // Assigning columns header name for customerAccountJTable table
        customerAccountsRecordsModel.addColumn("Passport Number");
        customerAccountsRecordsModel.addColumn("Customer First Name");
        customerAccountsRecordsModel.addColumn("Customer Last Name");
        customerAccountsRecordsModel.addColumn("Account Number");
        customerAccountsRecordsModel.addColumn("Account Type");
        customerAccountsRecordsModel.addColumn("Balance");
        customerAccountsRecordsModel.addColumn("Account Status");
    }
    
    public TellerFrameMonthlyInterests(String tellerID) { // Parameterized constructor, used to pass variable values among classes
        this(); // This statement allows for the default constructor to run
        // Retrieving the systemLoginID from the 'access' frame and assigning it to thie new variable
        tellerIDGlobal = tellerID;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        closeMonthlyInyerest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerAccountsJTable = new javax.swing.JTable();
        btnProcessInterest = new javax.swing.JButton();
        btnOnlyActiveAccounts = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TellerPanelMonthlyInterest");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 123, 146));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(18, 63, 72));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Monthly Interest");

        closeMonthlyInyerest.setBackground(new java.awt.Color(204, 0, 0));
        closeMonthlyInyerest.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        closeMonthlyInyerest.setForeground(new java.awt.Color(255, 255, 255));
        closeMonthlyInyerest.setText("X");
        closeMonthlyInyerest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMonthlyInyerestActionPerformed(evt);
            }
        });

        customerAccountsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        customerAccountsJTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        customerAccountsJTable.setEnabled(false);
        jScrollPane1.setViewportView(customerAccountsJTable);

        btnProcessInterest.setBackground(new java.awt.Color(153, 0, 0));
        btnProcessInterest.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnProcessInterest.setForeground(new java.awt.Color(255, 255, 255));
        btnProcessInterest.setText("PROCESS INTEREST");
        btnProcessInterest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnProcessInterestMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnProcessInterestMousePressed(evt);
            }
        });
        btnProcessInterest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessInterestActionPerformed(evt);
            }
        });

        btnOnlyActiveAccounts.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        btnOnlyActiveAccounts.setText("Retrieve Only ACTIVE Accounts");
        btnOnlyActiveAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnlyActiveAccountsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(466, 466, 466)
                .addComponent(closeMonthlyInyerest)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOnlyActiveAccounts))
                .addGap(0, 28, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(btnProcessInterest, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(closeMonthlyInyerest))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1)))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOnlyActiveAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnProcessInterest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeMonthlyInyerestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMonthlyInyerestActionPerformed
        
        // This will close the monthlyInterest panel
        this.setVisible(false);
        
    }//GEN-LAST:event_closeMonthlyInyerestActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
        // Displaying message box showing confirmation message
        JOptionPane.showMessageDialog(null,
                "All the Customer Accounts are shown in the table below",
                "Account Records Retrieval Successful",
                JOptionPane.INFORMATION_MESSAGE);
        
        
        // Retrieveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Normal Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                 "(SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "anss.NSAccountNumber AS 'Account Number', 'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID)";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Bonus Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "(SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "abss.BSAccountNumber AS 'Account Number', 'Bonus Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID)";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Premier Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "apss.PSAccountNumber AS 'Account Number', 'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', "
                    + "acs.AccountStatus AS 'Account Status' FROM Customer c INNER JOIN "
                    + "AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_formComponentShown

    private void btnProcessInterestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProcessInterestMouseEntered
        // TODO add your handling code here:
        btnProcessInterest.setToolTipText("Click Approve Bank Systems to Process Interest to Accounts");
    }//GEN-LAST:event_btnProcessInterestMouseEntered

    private void btnProcessInterestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProcessInterestMousePressed
      
        // NOTIFIES AGENT ABOUT INTEREST PROCESS AND BLOCKS MULTIPLE CALCULATIONS
        // COLOUR CHANGES AND BUTTON DISABLED WHEN CLICKED
        btnProcessInterest.setBackground(Color.GREEN);
        btnProcessInterest.setForeground(Color.BLACK);
       // btnProcessInterest.setEnabled(false);
        btnProcessInterest.setText("Done");
      //  btnProcessInterest.setEnabled(true);
        
    }//GEN-LAST:event_btnProcessInterestMousePressed

    private void btnProcessInterestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessInterestActionPerformed
        Account taxcheck = new Account();
        if(taxcheck.taxcheck()){
        taxcheck.updateDbTaxes_Balance();
        
        }
        
        // Declaring a variable and storing the current month
        // The current month will be retrieved and converted to integer data type
        int currentMonth = Integer.parseInt(ltad.retrieveLocalMonth());
        
        // Declaring variable to store the transaction description ID that is retrieved from the dtabase
        String transactionDescriptionIDDB = "";
        
        // Retrieving the transaction description ID from the database
        try (Connection checkMonthlyInterestCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                    Statement checkMonthlyInterestStmt = checkMonthlyInterestCon.createStatement();) {       

            String checkMonthlyInterestSqlQuery = "SELECT TransactionDescriptionID FROM TransactionDescription "
                    + "WHERE TransactionDescription = 'INTEREST-MONTHLY'";

            // Executing SQL query
            ResultSet checkMonthlyInterestRs = checkMonthlyInterestStmt.executeQuery(checkMonthlyInterestSqlQuery);

            while(checkMonthlyInterestRs.next()) {

                String em = checkMonthlyInterestRs.getString("TransactionDescriptionID");
                transactionDescriptionIDDB = em.replace("\n", ",");
                System.out.println(transactionDescriptionIDDB);

                transactionDescriptionIDDB = checkMonthlyInterestRs.getString(0);

            }
        }
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        

        // Retrieving all the customer deposit transaction to check if the monthly intrest has been added or not
        try{       
            Connection checkMonthlyInterestAddedCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
            
            String checkMonthlyInterestAddedSqlQuery = "SELECT DTransactionNumber FROM CustomerTransactionDeposit WHERE "

                    + "tdTransactionDescriptionID = ? AND CONVERT(VARCHAR(25),TransactionDateTime,120) "
                    + "LIKE ?";
            
            PreparedStatement checkMonthlyInterestAddedStmt = checkMonthlyInterestAddedCon.prepareStatement(checkMonthlyInterestAddedSqlQuery);  
            System.out.println(currentMonth);
            
            checkMonthlyInterestAddedStmt.setString(1, transactionDescriptionIDDB);
            checkMonthlyInterestAddedStmt.setString(2, String.valueOf(currentMonth));

            
            // Executing SQL query
            ResultSet checkMonthlyInterestAddedRs = checkMonthlyInterestAddedStmt.executeQuery();  
            
            // Showing message box to user saying that the monthly interest for the current month has already been calculated.
            if(checkMonthlyInterestAddedRs.next()) {
                // Displaying message box 
                JOptionPane.showMessageDialog(null,
                        "Monthly Interest has Already been Added for this Month.",
                        "Monthly Interest - ERROR!",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            // Excuting the monthly interest calculation if interest is not added for the current month
            else{
                
                // Checking if the current month is december (12).
                // Because in december the interest rate doubles.
                if(currentMonth == 12){

                    /* There are three executions here */

                    /**
                     *  Execution One
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Normal Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', anss.NSAccountNumber AS 'Account Number', "
                            + "'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestDecember(accountBalance, "Normal Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                            Float interestAmountForAccount = (float)(accountBalanceWithMonthlyInterest - accountBalance);

                            // Executing a deposit transaction to include the interest amount into the customer's account
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "INSERT INTO CustomerTransactionDeposit (TransactionAmount, ansNSAccountNumber, tTellerID_ProcessedBy) "
                                    + "VALUES ('"+ interestAmountForAccount +"', '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"', " + tellerIDGlobal;

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                            // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountNormalSavings SET NSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE NSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");

                                    // Declaring variable to sore the transaction number
                                    String transactionNumber = "";

                                    try (Connection retrievingTransactionNumberCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                                            Statement retrievingTransactionNumberStmt = retrievingTransactionNumberCon.createStatement();) {

                                        // Assigning SQL query
                                        String retrievingTransactionNumberSqlQuery = "SELECT TOP DTransactionNumber FROM CustomerDepositTransaction "
                                                + "WHERE ansNSAccountNumber = '" + retrieveCustomerAccountsRecordsRs.getString(4) + "'";

                                        // Executing SQL query
                                        ResultSet retrievingTransactionNumberRs = retrievingTransactionNumberStmt.executeQuery(retrievingTransactionNumberSqlQuery);

                                        if (retrievingTransactionNumberRs.next()) {
                                            transactionNumber = retrievingTransactionNumberRs.getString(1);
                                        }
                                    } 
                                    // Error handling. Checks for SQL related issues
                                    catch (SQLException SqlEx) {
                                        System.out.println("Error found: " + SqlEx);
                                        // Displaying message box showing error message
                                        JOptionPane.showMessageDialog(null,
                                                "Error Occurred in SQL Database Connection",
                                                "New Customer Registration - ERROR!",
                                                JOptionPane.ERROR_MESSAGE);
                                    }

                                    // Updating transaction status as successful
                                    try (Connection updatingTransactionStatusCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                                    Statement updatingTransactionStatusStmt = updatingTransactionStatusCon.createStatement();) {       

                                        String updatingTransactionStatusSqlQuery = 
                                            "UPDATE CustomerTransactionDeposit SET tsTransactionStatusID = 'TS000001' "
                                                + "WHERE DTransactionNumber = '"+ transactionNumber +"'";

                                        // Executing SQL query
                                        Boolean updatingTransactionStatusRs = updatingTransactionStatusStmt.execute(updatingTransactionStatusSqlQuery);

                                        if(updatingTransactionStatusRs == true) {
                                            System.out.println("Transaction status were successfully updated");
                                        }
                                    } 
                                    // Error handling. Handles any SQL related errors.
                                    catch (SQLException SqlEx) {
                                        System.out.println("Error found: " + SqlEx);
                                        // Displaying message box showing error message
                                        JOptionPane.showMessageDialog(null,
                                                "Error Occurred in SQL Database Connection",
                                                "Monthly Interest - ERROR!",
                                                JOptionPane.ERROR_MESSAGE);
                                    }



                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }



                        }

                    } 
                    // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }


                    /**
                     *  Execution Two
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Bonus Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', abss.BSAccountNumber AS 'Account Number', "
                            + "'Bonus Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestDecember(accountBalance, "Bonus Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                            // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountBonusSavings SET BSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE BSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                        }

                    } // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }


                    /**
                     *  Execution Three
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Premier Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', apss.PSAccountNumber AS 'Account Number', "
                            + "'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestDecember(accountBalance, "Premier Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                             // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountPremierSavings SET PSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE PSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                        }

                    } 
                    // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    // Displaying message box showing confirmation message
                    JOptionPane.showMessageDialog(null,
                        "Monthly Interest Processed to all ACTIVE Customer Accounts",
                        "Monthly Interest",
                        JOptionPane.INFORMATION_MESSAGE);

                }
                else{ 
                    // This will be executed in every month otherthan december
                    // There are three execution here

                    /**
                     *  Execution One
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Normal Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', anss.NSAccountNumber AS 'Account Number', "
                            + "'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestMonthly(accountBalance, "Normal Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                             // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountNormalSavings SET NSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE NSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                        }

                    } 
                    // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }


                    /**
                     *  Execution Two
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Bonus Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', abss.BSAccountNumber AS 'Account Number', "
                            + "'Bonus Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestMonthly(accountBalance, "Bonus Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                             // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountBonusSavings SET BSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE BSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                        }

                    } 
                    // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }


                    /**
                     *  Execution Three
                     */

                    // Retrieveing customer account records and incrementing them with the monthly interest 
                      // This will retrieve only the customer account records that has the account status of 'Active'.
                      //  Retrieving Premier Savings Accounts
                    try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       

                        String retrieveCustomerAccountsRecordsSqlQuery = 
                            "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', apss.PSAccountNumber AS 'Account Number', "
                            + "'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                            + "FROM Customer c INNER JOIN AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                            + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

                        // Executing SQL query
                        ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

                        // Executing monthly interest implementation
                        while (retrieveCustomerAccountsRecordsRs.next()) {

                            Double accountBalance = Double.parseDouble(retrieveCustomerAccountsRecordsRs.getString(6));

                            Float accountBalanceWithMonthlyInterest = (float)monthlyInterest.interestMonthly(accountBalance, "Premier Savings");

                            System.out.println("New Account Balance (With Monthly Interest): " + accountBalanceWithMonthlyInterest);

                             // Updating the account balance with the monthly interest added to it
                            try (Connection updatingAccountBalanceCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                            Statement updatingAccountBalanceStmt = updatingAccountBalanceCon.createStatement();) {       

                                String updatingAccountBalanceSqlQuery = 
                                    "UPDATE AccountPremierSavings SET PSAccountBalance = '"+ accountBalanceWithMonthlyInterest +"' "
                                        + "WHERE PSAccountNumber = '"+ retrieveCustomerAccountsRecordsRs.getString(4) +"'";

                                // Executing SQL query
                                Boolean updatingAccountBalanceRs = updatingAccountBalanceStmt.execute(updatingAccountBalanceSqlQuery);

                                if(updatingAccountBalanceRs == true) {
                                    System.out.println("Customer account balance were successfully updated");
                                }
                            } 
                            // Error handling. Handles any SQL related errors.
                            catch (SQLException SqlEx) {
                                System.out.println("Error found: " + SqlEx);
                                // Displaying message box showing error message
                                JOptionPane.showMessageDialog(null,
                                        "Error Occurred in SQL Database Connection",
                                        "Monthly Interest - ERROR!",
                                        JOptionPane.ERROR_MESSAGE);
                            }

                        }

                    } // Error handling. Handles any SQL related errors.
                    catch (SQLException SqlEx) {
                        System.out.println("Error found: " + SqlEx);
                        // Displaying message box showing error message
                        JOptionPane.showMessageDialog(null,
                                "Error Occurred in SQL Database Connection",
                                "Monthly Interest - ERROR!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    // Displaying message box showing confirmation message
                    JOptionPane.showMessageDialog(null,
                        "Monthly Interest Processed to all ACTIVE Customer Accounts",
                        "Monthly Interest",
                        JOptionPane.INFORMATION_MESSAGE);

                }
                
            }
        }
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }

        
              
    }//GEN-LAST:event_btnProcessInterestActionPerformed

    private void btnOnlyActiveAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnlyActiveAccountsActionPerformed
        
        // Removing all the exiting records in the customer accounts table
        int recordCountRemove = customerAccountsJTable.getRowCount();
        for (int i = recordCountRemove - 1; i >= 0; i--) {
            customerAccountsRecordsModel.removeRow(i);
        }
        
        
        // Retrieveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Normal Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                 "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', anss.NSAccountNumber AS 'Account Number', "
                        + "'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                        + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                        + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Bonus Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', abss.BSAccountNumber AS 'Account Number', "
                    + "'Bonus Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Premier Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', apss.PSAccountNumber AS 'Account Number', "
                    + "'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to customer account table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        
        
    }//GEN-LAST:event_btnOnlyActiveAccountsActionPerformed
    static int xcord,ycord;

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
       xcord = evt.getX();
        ycord = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
            int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xcord, y - ycord);
    }//GEN-LAST:event_jPanel2MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TellerFrameMonthlyInterests().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOnlyActiveAccounts;
    private javax.swing.JButton btnProcessInterest;
    private javax.swing.JButton closeMonthlyInyerest;
    private javax.swing.JTable customerAccountsJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
