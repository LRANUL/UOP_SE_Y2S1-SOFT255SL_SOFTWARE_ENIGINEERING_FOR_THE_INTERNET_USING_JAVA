
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import DatabaseConnection.DBConnection;
import LocalTimeAndDate.LocalTimeAndDate;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lucas.L.H.H
 */
public class TellerFrameMonthlyInterests extends javax.swing.JFrame {

    /**
     * Creates new form TellerFrameMonthlyInterests
     */
    
    // Creating new object to retrieve current month from localhost 
    LocalTimeAndDate ltad;
    
    // Creating new table model for customerAccounts jtable in monthlyInterest panel
    DefaultTableModel customerAccountsRecordsModel;
    
    // Creating a new object to retrieve the database connection URL
    DBConnection db;
    
    public TellerFrameMonthlyInterests() {
        initComponents();
        
        // Creating new object to retrieve current month from localhost 
        ltad = new LocalTimeAndDate();
        
        // Creating a new object to retrieve the database connection URL
        db = new DBConnection();
        
        
        // Assigning table model to the customerAccountsJTable table
        customerAccountsRecordsModel = (DefaultTableModel) customerAccountsJTable.getModel();
        
        // Assigning columns header name for customerAccountJTable table
        customerAccountsRecordsModel.addColumn("Passport Number");
        customerAccountsRecordsModel.addColumn("Customer First Name");
        customerAccountsRecordsModel.addColumn("Customer Last Name");
        customerAccountsRecordsModel.addColumn("Account Number");
        customerAccountsRecordsModel.addColumn("Account Type");
        customerAccountsRecordsModel.addColumn("Balance");
        customerAccountsRecordsModel.addColumn("Account Status");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        closeMonthlyInyerest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerAccountsJTable = new javax.swing.JTable();
        btnProcessInterest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TellerPanelMonthlyInterest");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 123, 146));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(18, 63, 72));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Monthly Interest");

        closeMonthlyInyerest.setBackground(new java.awt.Color(204, 0, 0));
        closeMonthlyInyerest.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        closeMonthlyInyerest.setForeground(new java.awt.Color(255, 255, 255));
        closeMonthlyInyerest.setText("X");
        closeMonthlyInyerest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMonthlyInyerestActionPerformed(evt);
            }
        });

        customerAccountsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        customerAccountsJTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(customerAccountsJTable);

        btnProcessInterest.setBackground(new java.awt.Color(153, 0, 0));
        btnProcessInterest.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnProcessInterest.setForeground(new java.awt.Color(255, 255, 255));
        btnProcessInterest.setText("PROCESS INTEREST");
        btnProcessInterest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnProcessInterestMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnProcessInterestMousePressed(evt);
            }
        });
        btnProcessInterest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessInterestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeMonthlyInyerest)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnProcessInterest, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(225, 225, 225))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(closeMonthlyInyerest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(btnProcessInterest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeMonthlyInyerestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMonthlyInyerestActionPerformed
        
        // This will close the monthlyInterest panel
        System.exit(0);
        
    }//GEN-LAST:event_closeMonthlyInyerestActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
        // Displaying message box showing confirmation message
        JOptionPane.showMessageDialog(null,
                "All the Customer Accounts are shown in the table below",
                "Account Records Retrieval Successful",
                JOptionPane.INFORMATION_MESSAGE);
        
        
        // Retrieveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Normal Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                 "(SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "anss.NSAccountNumber AS 'Account Number', 'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID)";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells.
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Bonus Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "(SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "abss.BSAccountNumber AS 'Account Number', 'Normal Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID)";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retriveing customer account record data from the database and assigning to customer account table cells
          // This will retrieve all the customer account records no matter what the account status is.
          //  Retrieving Premier Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', "
                    + "apss.PSAccountNumber AS 'Account Number', 'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', "
                    + "acs.AccountStatus AS 'Account Status' FROM Customer c INNER JOIN "
                    + "AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                customerAccountsRecordsModel.insertRow(customerAccountsRecordsModel.getRowCount(), new Object[]{retrieveCustomerAccountsRecordsRs.getString(1),
                    retrieveCustomerAccountsRecordsRs.getString(2), retrieveCustomerAccountsRecordsRs.getString(3), retrieveCustomerAccountsRecordsRs.getString(4), 
                    retrieveCustomerAccountsRecordsRs.getString(5), retrieveCustomerAccountsRecordsRs.getString(6), retrieveCustomerAccountsRecordsRs.getString(7)});      
            }

        } 
        // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        
        
        
    }//GEN-LAST:event_formComponentShown

    private void btnProcessInterestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProcessInterestMouseEntered
        // TODO add your handling code here:
        btnProcessInterest.setToolTipText("Click Approve Bank Systems to Process Interest to Accounts");
    }//GEN-LAST:event_btnProcessInterestMouseEntered

    private void btnProcessInterestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProcessInterestMousePressed
      
        // NOTIFIES AGENT ABOUT INTEREST PROCESS AND BLOCKS MULTIPLE CALCULATIONS
        // COLOUR CHANGES AND BUTTON DISABLED WHEN CLICKED
        btnProcessInterest.setBackground(Color.GREEN);
        btnProcessInterest.setForeground(Color.BLACK);
       // btnProcessInterest.setEnabled(false);
        btnProcessInterest.setText("Done");
        btnProcessInterest.setEnabled(true);
        
    }//GEN-LAST:event_btnProcessInterestMousePressed

    private void btnProcessInterestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessInterestActionPerformed
        
        // Displaying message box showing confirmation message
        JOptionPane.showMessageDialog(null,
                "Monthly Interest Processed to all ACTIVE Customer Accounts",
                "Monthly Interest",
                JOptionPane.INFORMATION_MESSAGE);
        
        // Declaring a varialbe and storing the current month
        String currentMonth = ltad.retrieveLocalMonth();
        
        if(currentMonth == "11"){
        
  
        // Retrieveing customer account records and incrementing them with the monthly interest 
          // This will retrieve only the customer account records that has the account status of 'Active'.
          //  Retrieving Normal Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                 "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', anss.NSAccountNumber AS 'Account Number', "
                    + "'Normal Savings' AS 'Account Type', anss.NSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountNormalSavings anss ON c.PassportNumber = anss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON anss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                
            }

        } // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retrieveing customer account records and incrementing them with the monthly interest 
          // This will retrieve only the customer account records that has the account status of 'Active'.
          //  Retrieving Bonus Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', abss.BSAccountNumber AS 'Account Number', "
                    + "'Bonus Savings' AS 'Account Type', abss.BSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountBonusSavings abss ON c.PassportNumber = abss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON abss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                
            }

        } // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
        // Retrieveing customer account records and incrementing them with the monthly interest 
          // This will retrieve only the customer account records that has the account status of 'Active'.
          //  Retrieving Premier Savings Accounts
        try (Connection retrieveCustomerAccountsRecordsCon = DriverManager.getConnection(db.DatabaseConnectionUrl());
                Statement retrieveCustomerAccountsRecordsStmt = retrieveCustomerAccountsRecordsCon.createStatement();) {       
            
            String retrieveCustomerAccountsRecordsSqlQuery = 
                    "SELECT c.PassportNumber AS 'Passport Number', c.FirstName AS 'First Name', c.LastName AS 'Last Name', apss.PSAccountNumber AS 'Account Number', "
                    + "'Premier Savings' AS 'Account Type', apss.PSAccountBalance AS 'Balance', acs.AccountStatus AS 'Account Status' "
                    + "FROM Customer c INNER JOIN AccountPremierSavings apss ON c.PassportNumber = apss.cPassportNumber INNER JOIN "
                    + "AccountStatus acs ON apss.asAccountStatusID = acs.AccountStatusID WHERE acs.AccountStatusID = 'AS000001'";

            // Executing SQL query, uses the same SQL query as verifyTransactionRecordsSqlQuery
            ResultSet retrieveCustomerAccountsRecordsRs = retrieveCustomerAccountsRecordsStmt.executeQuery(retrieveCustomerAccountsRecordsSqlQuery);

            // Assigning returned values to transaction details table cells
            while (retrieveCustomerAccountsRecordsRs.next()) {
                
            }

        } // Error handling. Handles any SQL related errors.
        catch (SQLException SqlEx) {
            System.out.println("Error found: " + SqlEx);
            // Displaying message box showing error message
            JOptionPane.showMessageDialog(null,
                    "Error Occurred in SQL Database Connection",
                    "Monthly Interest - ERROR!",
                    JOptionPane.ERROR_MESSAGE);
        }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        else{
        
        
        
        
        
        
        }
        
        
        
        
        
    }//GEN-LAST:event_btnProcessInterestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TellerFrameMonthlyInterests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TellerFrameMonthlyInterests().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcessInterest;
    private javax.swing.JButton closeMonthlyInyerest;
    private javax.swing.JTable customerAccountsJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
